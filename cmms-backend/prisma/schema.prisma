generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./cmms.db"
}

model Equipment {
  id                      String              @id @default(uuid())
  serialNumber            String              @unique
  manufacturerName        String
  modelNumber             String
  manufacturerServiceNumber String
  vendorName              String
  vendorCode              String
  locationDescription     String
  locationCode            String
  purchasePrice           Float
  installationDate        DateTime
  warrantyExpirationDate  DateTime
  status                  String              @default("Operational")
  category                String              // e.g., "Microscope", "Centrifuge", "Analyzer"
  department              String
  lastMaintenance         DateTime?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  maintenanceHistory      MaintenanceHistory[]
  workOrders              WorkOrder[]
  contracts               Contract[]
  compliance              Compliance[]
  spareParts              SparePart[]
  maintenanceReports      MaintenanceReport[]
}

model SparePart {
  id          String   @id @default(uuid())
  name        String
  quantity    Int
  threshold   Int
  lastUpdated String
  alert       String?
  category    String
  unitCost    Float
  supplier    String?
  location    String
  minOrderQty Int
  leadTime    Int    // in days
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId String
}

model WorkOrder {
  id                  String   @id @default(uuid())
  equipmentId         String
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  issue               String
  type                String   // "Preventive", "Corrective", "Calibration", "Inspection"
  priority            String   @default("Medium") // "Low", "Medium", "High", "Critical"
  status              String   @default("Reported") // "Reported", "Assigned", "In Progress", "On Hold", "Completed", "Cancelled"
  reportedById        String
  reportedBy          User     @relation("ReportedWorkOrders", fields: [reportedById], references: [id])
  reportedAt          DateTime
  assignedToId        String?
  assignedTo          User?    @relation("AssignedWorkOrders", fields: [assignedToId], references: [id])
  assignedAt          DateTime?
  estimatedCompletion DateTime?
  description         String
  symptoms            String?
  impact              String?
  actions             String?
  notes               String?
  sparePartsNeeded    String?
  partsUsed           String?
  completionNotes     String?
  completedAt         DateTime?
  cost                Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Contract {
  id          String   @id @default(uuid())
  vendor      String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  startDate   String
  endDate     String
  details     String
  status      String
}

model MaintenanceHistory {
  id          String   @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  type        String   // "Preventive" or "Corrective"
  description String
  performedBy String
  date        String
  cost        Float?
  partsUsed   String?
}

model Report {
  id          String   @id @default(uuid())
  type        String   // "Performance", "Financial", "Compliance"
  title       String
  content     String
  generatedAt String
  generatedBy String
  period      String   // e.g., "2025-06"
  metrics     String   // JSON string of key metrics
}

model Budget {
  id          String   @id @default(uuid())
  year        String
  month       String
  category    String   // e.g., "Maintenance", "Parts", "Contracts"
  allocated   Float
  spent       Float
  department  String
}

model Compliance {
  id          String   @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  standard    String
  status      String
  lastCheck   String
  nextDue     String
  notes       String?
}

model User {
  id                    String   @id @default(uuid())
  username              String   @unique
  email                 String   @unique
  role                  String   // "Admin", "Technician", "Engineer", "LabTechnician"
  password              String
  department            String?
  permissions           String   // JSON string of specific permissions
  lastLogin             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  reportedWorkOrders    WorkOrder[] @relation("ReportedWorkOrders")
  assignedWorkOrders    WorkOrder[] @relation("AssignedWorkOrders")
  maintenanceReports    MaintenanceReport[]
}

model MaintenanceReport {
  id            String   @id @default(uuid())
  equipmentId   String
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
  type          String   // "Preventive", "Corrective", "Calibration", "Inspection"
  description   String
  performedById String
  performedBy   User     @relation(fields: [performedById], references: [id])
  date          DateTime
  cost          Float?
  partsUsed     String?
  status        String   @default("Completed") // "Scheduled", "In Progress", "Completed", "Cancelled"
  findings      String?
  recommendations String?
  nextDueDate   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}